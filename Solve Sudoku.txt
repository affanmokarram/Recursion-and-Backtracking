   Q> 1. You are give a partially filled 9*9 2-D array(arr) which represents an incomplete sudoku state.
2. You are required to assign the digits from 1 to 9 to the empty cells following some rules.
Rule 1 -> Digits from 1-9 must occur exactly once in each row.
Rule 2 -> Digits from 1-9 must occur exactly once in each column.
Rule 3 -> Digits from 1-9 must occur exactly once in each 3x3 sub-array of the given 2D array.

Assumption -> The given Sudoku puzzle will have a single unique solution.



import java.io.*;
import java.util.*;

public class Main {
  public static void display(int[][] board) {
    for (int i = 0; i < board.length; i++) {
      for (int j = 0; j < board[0].length; j++) {
        System.out.print(board[i][j] + " ");
      }
      System.out.println();
    }
  }

  public static void solveSudoku(int[][] board, int i, int j) {
    // write yopur code here
    if (i == board.length) {
      display(board);
      return;
    }
    int ni = -1;
    int nj = -1;
    if (j == board[0].length - 1) {
      nj = 0;
      ni = i + 1;
    } else {
      ni = i;
      nj = j + 1;
    }
    if (board[i][j] != 0) {
      solveSudoku(board, ni, nj);
    } else {
      for (int ans = 1; ans <= 9; ans++) {
        if (check(ans, board, i, j)) {
          board[i][j] = ans;
          solveSudoku(board, ni, nj);
          board[i][j] = 0;
        }
      }
    }
  }
  public static boolean check(int ans, int board[][], int x, int y) {
    for (int k = 0; k < board.length; k++) {
      if (board[x][k] == ans) {
        return false;
      }
    }
    for (int k = 0; k < board.length; k++) {
      if (board[k][y] == ans) {
        return false;
      }
    }
    int smi=x/3 * 3;
    int smj=y/3 * 3;
    for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
            if(board[smi+i][smj+j]==ans){
                return false;
            }
        }
    }
    return true;

  }

  public static void main(String[] args) throws Exception {
    Scanner scn = new Scanner(System.in);
    int[][] arr = new int[9][9];
    for (int i = 0; i < 9; i++) {
      for (int j = 0; j < 9; j++) {
        arr[i][j] = scn.nextInt();
      }
    }

    solveSudoku(arr, 0, 0);
  }
}
  